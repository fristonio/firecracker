basePath: /
definitions:
  api.AuthorizationChallengeResp:
    properties:
      challenge:
        example: Challenge String
        type: string
      message:
        example: Response message
        type: string
    type: object
  api.AvailableImagesResp:
    properties:
      images:
        example:
        - '[''ubuntu16.04'''
        - ' ''ubuntu18.04'']'
        items:
          type: string
        type: array
      message:
        example: Available Base images.
        type: string
    type: object
  api.HTTPAuthorizeResp:
    properties:
      message:
        example: Response message
        type: string
      token:
        example: YOUR_AUTHENTICATION_TOKEN
        type: string
    type: object
  api.HTTPPlainResp:
    properties:
      message:
        example: Messsage in response to your request
        type: string
    type: object
  api.PortsInUseResp:
    properties:
      port_max_value:
        example: 20000
        type: integer
      port_min_value:
        example: 10000
        type: integer
      ports_in_use:
        example:
        - '[10000'
        - ' 100001'
        - ' 100003'
        - ' 10010]'
        items:
          type: uint32
        type: array
    type: object
host: beast.sdslabs.co
info:
  contact:
    email: contact.sdslabs.co.in
    name: SDSLabs
    url: https://chat.sdslabs.co
  description: Beast the automatic deployment tool for backdoor
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Beast API
  version: "1.0"
paths:
  /api/config/reaload/:
    patch:
      consumes:
      - application/json
      description: Populates beast gobal config map by reparsing the config file $HOME/.beast/config.toml.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
      summary: Reloads any changes in beast global configuration, located at ~/.beast/config.toml.
      tags:
      - config
  /api/info/images/available:
    get:
      consumes:
      - application/json
      description: Returns all the available base images  which can be used for challenge
        creation as the base OS for challenge.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.AvailableImagesResp'
            type: object
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/api.AvailableImagesResp'
            type: object
      summary: Gives all the base images that can be used while creating a beast challenge,
        this is a constant specified in beast global config
      tags:
      - info
  /api/info/ports/used:
    get:
      consumes:
      - application/json
      description: Returns the ports in use by beast, which cannot be used in creating
        a new challenge..
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.PortsInUseResp'
            type: object
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/api.PortsInUseResp'
            type: object
      summary: Returns ports in use by beast by looking in the hack git repository,
        also returns min and max value of port allowed while specifying in beast challenge
        config.
      tags:
      - info
  /api/manage/all/:
    post:
      consumes:
      - application/json
      description: Handles challenge management routes for all the challenges with
        actions which includes - DEPLOY, UNDEPLOY.
      parameters:
      - description: Action for the challenge
        in: query
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
      summary: Handles challenge management actions for multiple(all) challenges.
      tags:
      - manage
  /api/manage/challenge/:
    post:
      consumes:
      - application/json
      description: Handles challenge management routes with actions which includes
        - DEPLOY, UNDEPLOY, PURGE.
      parameters:
      - description: Name of the challenge to be managed, here name is the unique
          identifier for challenge
        in: query
        name: name
        required: true
        type: string
      - description: Action for the challenge
        in: query
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
      summary: Handles challenge management actions.
      tags:
      - manage
  /api/manage/deploy/local:
    post:
      consumes:
      - application/json
      description: Handles deployment of a challenge using the absolute directory
        path
      parameters:
      - description: Challenge Directory
        in: query
        name: challenge_dir
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
      summary: Deploy a local challenge using the path provided in the post parameter
      tags:
      - manage
  /api/manage/static/:
    post:
      consumes:
      - application/json
      description: Handles beast static content serving container routes.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
      summary: Handles route related to beast static content serving container, takes
        action as route parameter and perform that action
      tags:
      - manage
  /api/remote/reset/:
    post:
      consumes:
      - application/json
      description: Resets local copy of remote git directory, it first deletes the
        existing directory and then clone from the remote again.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
      summary: Resets beast local copy of remote git repository.
  /api/remote/sync/:
    post:
      consumes:
      - application/json
      description: Syncs beasts local challenges database with the remote git repository(hack)
        the local copy of the challenge database is located at $HOME/.beast/remote/$REMOTE_NAME.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
      summary: Syncs beast's local copy of remote git repository for challenges.
  /auth/:
    get:
      description: Sends challenge for authorization of user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.AuthorizationChallengeResp'
            type: object
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
      summary: Handles challenge generation
      tags:
      - auth
    post:
      consumes:
      - application/json
      description: JWT can be received by sending back correct answer to challenge
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.HTTPAuthorizeResp'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.HTTPPlainResp'
            type: object
      summary: Handles solution check and token production
      tags:
      - auth
swagger: "2.0"
